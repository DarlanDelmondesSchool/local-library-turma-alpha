name: Exec2.5 Pipeline - Checkout + Upload + Download + GetVersion + Send to S3 + SNS + Cloudformation Stack
# ideia: Cloudformation --> EC2 com a versao do S3

on:
  push:
    branches: [ main ]
env:
  NOME_ARTEFATO: myApp

jobs:
  checkout:
    runs-on: ubuntu-latest
    name: Upload Action
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        repository: ${{ github.repository }}
    - name: Upload
      uses: actions/upload-artifact@v2.2.2
      with:
        name: ${{ env.NOME_ARTEFATO }}
        path: .

  checkQAGate:
    runs-on: ubuntu-latest
    name: Mark Quality Gate Check
    needs: checkout
    steps:
      - name: Add File Check OK
      run: echo 'Approved' > quality_gate_check.info

  deployS3:
    runs-on: ubuntu-latest
    name: Deploy S3
    needs: [ checkout, checkQAGate ]
    steps:
    - name: Download
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.NOME_ARTEFATO }}
    - name: make dir to save package
      run: mkdir pkg
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: sa-east-1
    - name: Invoke Update Version Lambda DynamoDB
      run: aws lambda invoke --function-name UpdateVersion version
    - name: Create a zip file
      run: export VERSION=$(cat version); echo $VERSION; zip -r pkg/package-$(echo $VERSION).zip *
    - name: Creating a New Bucket S3
      run: |
        export VERSION=$(cat version); aws cloudformation create-stack --stack-name myteststack-$(echo $VERSION) --template-body file://cloudformation/template.yaml
    - name: Copy files to S3 AWS CLI with Version
      run: |
        export VERSION=$(cat version); echo $VERSION; aws s3 cp pkg/package-$(echo $VERSION).zip s3://github-repo-s3/myApp-version-$(echo $VERSION).zip
    - name: Sending MAIL via SNS
      run: |
        export VERSION=$(cat version); echo $VERSION; aws sns publish --topic-arn "${{ secrets.ARN_TOPIC_AWS }}" --message "Deploy v-$(echo $VERSION) Realizado com Sucesso"





